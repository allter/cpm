#!/usr/bin/env perl
use 5.16.3;
use strict;
use FindBin;
use Config;
use File::Path qw/remove_tree make_path/;
use CPAN::Meta::Requirements;
use Getopt::Long ();
use Cwd;
use JSON::PP;

my $bin_cpm = '/usr/bin/cpm';
my $build_dir = "build/";

my %with_defaults = (
    requires => 1,
    recommends => 0,
    suggests => 0,
    configure => 0,
    build => 1,
    test => 1,
    runtime => 1,
    develop => 0,
);
my %with = %with_defaults;
my $with_option = sub {
    my $n = shift;
    ("with-$n", \$with{$n}, "without-$n", sub { $with{$n} = 0 });
};

Getopt::Long::Configure(qw(pass_through)); # This makes cpm_bundler "a frontend to cpm". All options for cpm may be specified, but not all are OK with cpm_bundler/
Getopt::Long::GetOptions(
    "L|local-lib-contained=s" => \my $local_lib,
    "f|force" => \my $force,
    "t|restore" => \my $restore,
    "update=s" => \my $update,
    "install=s" => \my $install,
    "rebuild" => \my $rebuild,
    "config=s" => \my $config_json,
    "cpm_path=s" => \my $path_cpm,
    "dev_cpm" => \my $dev_cpm,
    "build_dir=s" => \$build_dir,
    "no-delete" => \my $no_delete,
    "no-install-build-local" => \my $no_install_build_local,
    (map { $with_option->($_) } keys %with_defaults),
) or exit 1;
my @cpm_options= @ARGV;

$local_lib = 'local' unless +$local_lib;

die "Config file `$config_json` does not exists" if $config_json && !-f $config_json;
$config_json ||= ".cpm_bundler.json";
if (-f $config_json) {
    open(my $json_cfg_fh, '<', $config_json) or die "Can't open `$config_json`: $!";
    my $json;
    while(<$json_cfg_fh>) {
        chomp;
        $json .= $_;
    }
    close($json_cfg_fh);
    my $cfg = JSON::PP->new->relaxed([])->decode($json);
    $ENV{$_} = $cfg->{ENV}->{$_} . (exists $ENV{$_} ? ':' . $ENV{$_} : '') for keys %{$cfg->{ENV}};
}

$bin_cpm = $path_cpm . '/cpm' if $path_cpm;
die "dev_cpm required cpm_path option" if $dev_cpm && ! $path_cpm;
die "cpm `$bin_cpm` not found" unless -f $bin_cpm;

my $lib_cpm = [];
if ($dev_cpm) {
    $lib_cpm = [$build_dir . '/local/lib/perl5'];
    push @$lib_cpm, ($path_cpm . '/../lib', $path_cpm . '/../local/lib/perl5');

    make_path($build_dir) unless -d $build_dir;
    unless (-f $build_dir . '/cpanfile') {
        open(my $cpanfile, '>', $build_dir . '/cpanfile') or die "Can't create cpanfile for builder: $!";
        print {$cpanfile} <<CPANFILE;
on develop => sub {
    requires 'IO::Uncompress::Gunzip', '0';
    requires 'Carton', '1.0.34_1', git => 'https://github.com/Nikolo/carton.git'; #https://github.com/perl-carton/carton/pull/263
    requires 'CPAN::Mirror::Tiny', '0.20';
    requires 'Capture::Tiny';
    requires 'Path::Tiny';
    requires 'Test::More', '0.98';
    requires 'Archive::Tar';
    requires 'Archive::Zip', '!= 1.66';
    requires 'JSON::XS', '0';
};
CPANFILE
        close($cpanfile);
    }
}

sub cpm {
    my $prefix = shift;
    my @cmd = ($^X, (map { ('-I', $_ ); } @$lib_cpm), $bin_cpm, @_);
    warn "\e[1;31m$prefix\e[m " . encode_json(\@cmd) . "\n";
    return system(@cmd);
}

sub gen_snapshot {
    warn "\e[1;31mGenerate snapshot\e[m\n";
    our $build_lib = $build_dir . '/local/lib/perl5';
    eval q{use lib ( $build_lib ); 1} or die "Error in 'use lib': $@";
    undef $build_lib;
    require 'Carton/Snapshot.pm';
    my $snapshot = Carton::Snapshot->new(path => "cpanfile.snapshot");
    my $no_exclude = CPAN::Meta::Requirements->new;
    $snapshot->find_installs($local_lib, $no_exclude);
    $snapshot->save;
}

my @params = ("install");
push @params, map { $with{$_} ? "--with-$_" : "--without-$_" } grep { $with{$_} != $with_defaults{$_} } keys %with_defaults;

my $resolver = '';

if ($restore) {
    die "Unexists cpanfile.snapshot" unless -f "cpanfile.snapshot";
    remove_tree $local_lib unless $no_delete;
    push @params, ("--resolver", 'snapshot')
}

if ($force) {
    unlink 'cpanfile.snapshot' if -f 'cpanfile.snapshot';
    push @params, "--reinstall";
}

if ($rebuild){
    push @params, "--no-prebuilt", "--reinstall";
}

if (+$dev_cpm && !$no_install_build_local) {
    my $dir = getcwd;
    chdir $build_dir;
    die "cpm return code not 0" if cpm "Build devel package", "install", "--with-develop";
    chdir $dir;
}

push @params, '--local-lib-contained', $local_lib if +$local_lib;

push @params, @cpm_options;

if ($update or $install) {
    if ($update) {
        #remove_tree 'local' unless $no_delete;
        #die "cpm return code not 0" if cpm "Build project", 'install', "--resolver", 'snapshot';
    }
    die "cpm return code not 0" if cpm "Build project", @params, split(',', $update) , split(',', $install);
    gen_snapshot;
    if ($update) {
        remove_tree $local_lib unless $no_delete;
        die "cpm return code not 0" if cpm "Build project", 'install', "--resolver", 'snapshot';
    }
} else {
    if ($restore) {
        warn "Clean local";
        remove_tree $local_lib unless $no_delete;
    }
    die "cpm return code not 0" if cpm "Build project", @params;
    gen_snapshot unless $restore;
}
